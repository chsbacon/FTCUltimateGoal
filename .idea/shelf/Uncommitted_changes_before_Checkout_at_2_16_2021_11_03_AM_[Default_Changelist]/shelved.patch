Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/HardwareBACONbot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Copyright (c) 2017 FIRST. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted (subject to the limitations in the disclaimer below) provided that\r\n * the following conditions are met:\r\n *\r\n * Redistributions of source code must retain the above copyright notice, this list\r\n * of conditions and the following disclaimer.\r\n *\r\n * Redistributions in binary form must reproduce the above copyright notice, this\r\n * list of conditions and the following disclaimer in the documentation and/or\r\n * other materials provided with the distribution.\r\n *\r\n * Neither the name of FIRST nor the names of its contributors may be used to endorse or\r\n * promote products derived from this software without specific prior written permission.\r\n *\r\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\r\n * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\r\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\r\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\npackage org.firstinspires.ftc.teamcode;\r\n\r\nimport com.qualcomm.hardware.bosch.BNO055IMU;\r\nimport com.qualcomm.hardware.rev.RevBlinkinLedDriver;\r\nimport com.qualcomm.robotcore.hardware.CRServo;\r\nimport com.qualcomm.robotcore.hardware.ColorSensor;\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\nimport com.qualcomm.hardware.rev.Rev2mDistanceSensor;\r\nimport com.qualcomm.robotcore.hardware.DistanceSensor;\r\nimport com.qualcomm.robotcore.hardware.HardwareMap;\r\nimport com.qualcomm.robotcore.hardware.Servo;\r\nimport com.qualcomm.robotcore.util.ElapsedTime;\r\n\r\n\r\n/**\r\n * This is NOT an opmode.\r\n *\r\n * This class defines all the specific hardware for a the BACONbot robot.\r\n *\r\n * This hardware class assumes the following device names have been configured on the robot:\r\n *\r\n * Motor channel:   Front Left drive motor:       \"FL\"\r\n * Motor channel:  Front Right  drive motor:      \"FR\"\r\n * Motor channel:   Back Left drive motor:        \"BL\"\r\n * Motor channel:  Back Right  drive motor:       \"BR\"\r\n *\r\n */\r\n\r\npublic class HardwareBACONbot\r\n{\r\n    /* Public OpMode members. */\r\n    public DcMotor  frontLeftMotor   = null;\r\n    public DcMotor  frontRightMotor  = null;\r\n    public DcMotor  backLeftMotor    = null;\r\n    public DcMotor  backRightMotor   = null;\r\n\r\n    public DcMotor intakeMotor = null;\r\n    public DcMotor launchMotor = null;\r\n\r\n    public DistanceSensor backDistance = null;\r\n    //public DistanceSensor frontDistance = null;\r\n\r\n    public Servo    wobbleServo = null;\r\n    public Servo    tiltServo = null;\r\n    public Servo    feederServo = null;\r\n\r\n    public RevBlinkinLedDriver blinkinLedDriver;\r\n    public RevBlinkinLedDriver.BlinkinPattern pattern;\r\n\r\n    public BNO055IMU imu;\r\n\r\n    /* local OpMode members. */\r\n    private HardwareMap hwMap =  null;\r\n    private ElapsedTime period  = new ElapsedTime();\r\n\r\n    /* Constructor */\r\n    public HardwareBACONbot(){\r\n    }\r\n\r\n    /* Initialize standard Hardware interfaces */\r\n    public void init(HardwareMap ahwMap) {\r\n        // Save reference to Hardware map\r\n        hwMap = ahwMap;\r\n\r\n        // Define and Initialize Motors\r\n        frontLeftMotor  = hwMap.dcMotor.get(\"FL\"); // H1 0 - motor port\r\n        frontRightMotor = hwMap.dcMotor.get(\"FR\"); // H1 1\r\n        backLeftMotor   = hwMap.dcMotor.get(\"BL\"); // H1 2\r\n        backRightMotor  = hwMap.dcMotor.get(\"BR\"); // H1 3\r\n\r\n        launchMotor = hwMap.dcMotor.get(\"LM\"); // Hub 2 motor port 0\r\n        intakeMotor = hwMap.dcMotor.get(\"IM\"); // Hub 2 motor port 1\r\n\r\n        backDistance = hwMap.get(DistanceSensor.class, \"bsr\"); //hub2 port 2\r\n        //frontDistance = hwMap.get(DistanceSensor.class, \"fsr\"); //hub2 port 2\r\n\r\n        wobbleServo = hwMap.servo.get(\"wobble\");\r\n        tiltServo = hwMap.servo.get(\"tilt\");\r\n        feederServo = hwMap.servo.get(\"feeder\");\r\n\r\n        blinkinLedDriver = hwMap.get(RevBlinkinLedDriver.class, \"blinkin\");\r\n\r\n\r\n        // BACONbot uses AndyMark NeverRest Motors\r\n        // This code assumes that the motors turns counterclockwise,\r\n        //     looking from the back of the motor down the shaft,\r\n        //     when positive power is applied\r\n\r\n        /*  *****if the above assumption is incorrect uncomment these lines\r\n        frontLeftMotor.setDirection(DcMotor.Direction.REVERSE);\r\n        frontRightMotor.setDirection(DcMotor.Direction.REVERSE);\r\n        backLeftMotor.setDirection(DcMotor.Direction.REVERSE);\r\n        backRightMotor.setDirection(DcMotor.Direction.REVERSE);\r\n        */\r\n\r\n        // Set all motors to zero power\r\n        frontLeftMotor.setPower(0);\r\n        frontRightMotor.setPower(0);\r\n        backLeftMotor.setPower(0);\r\n        backRightMotor.setPower(0);\r\n\r\n        launchMotor.setPower(0);\r\n        intakeMotor.setPower(0);\r\n\r\n        feederServo.setPosition(0);\r\n        tiltServo.setPosition(0);\r\n        wobbleServo.setPosition(0);\r\n\r\n        // Set all motors to run without encoders.\r\n        // May want to use RUN_USING_ENCODERS if encoders are installed.\r\n        //\r\n\r\n        frontLeftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\r\n        frontRightMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\r\n        backLeftMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\r\n        backRightMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\r\n\r\n\r\n        //liftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        //liftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n\r\n        frontLeftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\r\n        frontRightMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\r\n        backLeftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\r\n        backRightMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\r\n\r\n        launchMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\r\n        intakeMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\r\n\r\n        // Set up the parameters with which we will use our IMU. Note that integration\r\n        // algorithm here just reports accelerations to the logcat log; it doesn't actually\r\n        // provide positional information.\r\n        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();\r\n        parameters.angleUnit           = BNO055IMU.AngleUnit.DEGREES;\r\n        parameters.accelUnit           = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;\r\n        parameters.calibrationDataFile = \"BNO055IMUCalibration.json\"; // see the calibration sample opmode\r\n        parameters.loggingEnabled      = true;\r\n        parameters.loggingTag          = \"IMU\";\r\n\r\n\r\n        // Retrieve and initialize the IMU. We expect the IMU to be attached to an I2C port\r\n        // on a Core Device Interface Module, configured to be a sensor of type \"AdaFruit IMU\",\r\n        // and named \"imu\".\r\n        imu = hwMap.get(BNO055IMU.class, \"imu\");\r\n        imu.initialize(parameters);\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TeamCode/src/main/java/org/firstinspires/ftc/teamcode/HardwareBACONbot.java	(revision d8e1a1e6b504b6b5cf5d3d84f4bda78792b2b71e)
+++ TeamCode/src/main/java/org/firstinspires/ftc/teamcode/HardwareBACONbot.java	(date 1613163061242)
@@ -40,6 +40,16 @@
 import com.qualcomm.robotcore.hardware.Servo;
 import com.qualcomm.robotcore.util.ElapsedTime;
 
+//Imports from Graham's hw map
+import org.firstinspires.ftc.robotcore.external.matrices.OpenGLMatrix;
+import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
+import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
+import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
+import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
+import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
+import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
+import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
+
 
 /**
  * This is NOT an opmode.
